{"version":3,"sources":["index.js"],"names":["style","height","App","sceneSetup","width","mount","clientWidth","clientHeight","scene","THREE","camera","position","z","controls","OrbitControls","renderer","setSize","appendChild","domElement","loadTheModel","loader","OBJLoader","load","object","add","sayholo","getObjectByName","set","material","color","rotateX","model","xhr","loadingPercentage","Math","ceil","loaded","total","console","log","props","onProgress","error","rotateZ","model1","model2","rotation","y","model3","addLights","lights","startAnimationLoop","x","render","requestID","window","requestAnimationFrame","handleWindowResize","aspect","updateProjectionMatrix","this","addEventListener","removeEventListener","cancelAnimationFrame","dispose","ref","Component","Container","state","isMounted","setState","React","rootElement","document","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.19d38cb3.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from 'three';\nimport {OrbitControls} from \"three/examples/jsm/controls/OrbitControls\";\nimport {OBJLoader} from \"three/examples/jsm/loaders/OBJLoader\";\n\nconst style = {\n    height: 500 // we can control scene size by setting container dimensions\n};\n\nclass App extends Component {\n    componentDidMount() {\n        this.sceneSetup();\n        this.addLights();\n        this.loadTheModel();\n        this.startAnimationLoop();\n        window.addEventListener('resize', this.handleWindowResize);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleWindowResize);\n        window.cancelAnimationFrame(this.requestID);\n        this.controls.dispose();\n    }\n\n    // Standard scene setup in Three.js. Check \"Creating a scene\" manual for more information\n    // https://threejs.org/docs/#manual/en/introduction/Creating-a-scene\n    sceneSetup = () => {\n        // get container dimensions and use them for scene sizing\n        const width = this.mount.clientWidth;\n        const height = this.mount.clientHeight;\n\n        this.scene = new THREE.Scene();\n        this.camera = new THREE.PerspectiveCamera(\n            0.8, // fov = field of view / How big is the object, the smaller the larger\n            width / height, // aspect ratio\n            1, // near plane\n            1000 // far plane\n        );\n        this.camera.position.z = 500; // is used here to set some distance from a cube that is located at z = 0\n        // OrbitControls allow a camera to orbit around the object\n        // https://threejs.org/docs/#examples/controls/OrbitControls\n        this.controls = new OrbitControls( this.camera, this.mount );\n        this.renderer = new THREE.WebGLRenderer();\n        this.renderer.setSize( width, height );\n        this.mount.appendChild( this.renderer.domElement ); // mount using React ref\n    };\n\n    // Code below is taken from Three.js OBJ Loader example\n    // https://threejs.org/docs/#examples/en/loaders/OBJLoader\n    loadTheModel = () => {\n        // instantiate a loader\n        const loader = new OBJLoader();\n\n        // load a resource\n        loader.load(\n            // resource URL relative to the /public/index.html of the app\n            'https://sayholo.s3.us-east-2.amazonaws.com/sayholo.obj',\n            // called when resource is loaded\n            ( object ) => {\n                this.scene.add( object );\n                // get the newly added object by name specified in the OBJ model (that is Elephant_4 in my case)\n                // you can always set console.log(this.scene) and check its children to know the name of a model\n                const sayholo = this.scene.getObjectByName(\"esp32_cam\");\n                // change some custom props of the element: placement, color, rotation, anything that should be\n                // done once the model was loaded and ready for display\n                sayholo.position.set(0, -2.5, 0 );\n                sayholo.material.color.set(0xfffff);\n                //sayholo.rotation.x = 23.5;\n                sayholo.rotateX(110);\n\n                // make this element available inside of the whole component to do any animation later\n                this.model = sayholo;\n            },\n            // called when loading is in progresses\n             ( xhr ) => {\n\n                const loadingPercentage = Math.ceil(xhr.loaded / xhr.total * 100);\n                console.log( ( loadingPercentage ) + '% loaded' );\n\n                // update parent react component to display loading percentage\n                this.props.onProgress(loadingPercentage);\n            },\n            // called when loading has errors\n             ( error ) => {\n\n                console.log( 'An error happened:' + error );\n\n            }\n        );\n        loader.load(\n            // resource URL relative to the /public/index.html of the app\n            'https://sayholo.s3.us-east-2.amazonaws.com/sayholo1.obj',\n            // called when resource is loaded\n            ( object ) => {\n                this.scene.add( object );\n                // get the newly added object by name specified in the OBJ model (that is Elephant_4 in my case)\n                // you can always set console.log(this.scene) and check its children to know the name of a model\n                const sayholo = this.scene.getObjectByName(\"esp32_cam_1\");\n                // change some custom props of the element: placement, color, rotation, anything that should be\n                // done once the model was loaded and ready for display\n                sayholo.position.set(2.5, 0, 0 );\n                sayholo.material.color.set(0xfffff);\n                //sayholo.rotation.y = 0.03;\n                sayholo.rotateZ(11);\n\n                // make this element available inside of the whole component to do any animation later\n                this.model1 = sayholo;\n            },\n            // called when loading is in progresses\n             ( xhr ) => {\n\n                const loadingPercentage = Math.ceil(xhr.loaded / xhr.total * 100);\n                console.log( ( loadingPercentage ) + '% loaded' );\n\n                // update parent react component to display loading percentage\n                this.props.onProgress(loadingPercentage);\n            },\n            // called when loading has errors\n             ( error ) => {\n\n                console.log( 'An error happened:' + error );\n\n            }\n        );\n        loader.load(\n            // resource URL relative to the /public/index.html of the app\n            'https://sayholo.s3.us-east-2.amazonaws.com/sayholo2.obj',\n            // called when resource is loaded\n            ( object ) => {\n                this.scene.add( object );\n                // get the newly added object by name specified in the OBJ model (that is Elephant_4 in my case)\n                // you can always set console.log(this.scene) and check its children to know the name of a model\n                const sayholo = this.scene.getObjectByName(\"esp32_cam_2\");\n                // change some custom props of the element: placement, color, rotation, anything that should be\n                // done once the model was loaded and ready for display\n                sayholo.position.set(-2.5, 0, 0 );\n                sayholo.material.color.set(0xfffff);\n                //sayholo.rotation.y = 0.03;\n                sayholo.rotateZ(-11);\n\n                // make this element available inside of the whole component to do any animation later\n                this.model2 = sayholo;\n            },\n            // called when loading is in progresses\n             ( xhr ) => {\n\n                const loadingPercentage = Math.ceil(xhr.loaded / xhr.total * 100);\n                console.log( ( loadingPercentage ) + '% loaded' );\n\n                // update parent react component to display loading percentage\n                this.props.onProgress(loadingPercentage);\n            },\n            // called when loading has errors\n             ( error ) => {\n\n                console.log( 'An error happened:' + error );\n\n            }\n        );\n        loader.load(\n            // resource URL relative to the /public/index.html of the app\n            'https://sayholo.s3.us-east-2.amazonaws.com/sayholo3.obj',\n            // called when resource is loaded\n            ( object ) => {\n                this.scene.add( object );\n                // get the newly added object by name specified in the OBJ model (that is Elephant_4 in my case)\n                // you can always set console.log(this.scene) and check its children to know the name of a model\n                const sayholo = this.scene.getObjectByName(\"esp32_cam_3\");\n                // change some custom props of the element: placement, color, rotation, anything that should be\n                // done once the model was loaded and ready for display\n                sayholo.position.set(0, 2.5, 0 );\n                sayholo.material.color.set(0xfffff);\n                sayholo.rotation.y = 0.03;\n\n                // make this element available inside of the whole component to do any animation later\n                this.model3 = sayholo;\n            },\n            // called when loading is in progresses\n             ( xhr ) => {\n\n                const loadingPercentage = Math.ceil(xhr.loaded / xhr.total * 100);\n                console.log( ( loadingPercentage ) + '% loaded' );\n\n                // update parent react component to display loading percentage\n                this.props.onProgress(loadingPercentage);\n            },\n            // called when loading has errors\n             ( error ) => {\n\n                console.log( 'An error happened:' + error );\n\n            }\n        );\n    };\n\n    // adding some lights to the scene\n    addLights = () => {\n        const lights = [];\n\n        // set color and intensity of lights\n        lights[ 0 ] = new THREE.PointLight( 0xffffff, 1, 0 );\n        lights[ 1 ] = new THREE.PointLight( 0xffffff, 1, 0 );\n        lights[ 2 ] = new THREE.PointLight( 0xffffff, 1, 0 );\n\n        // place some lights around the scene for best looks and feel\n        lights[ 0 ].position.set( 0, 2000, 0 );\n        lights[ 1 ].position.set( 1000, 2000, 1000 );\n        lights[ 2 ].position.set( - 1000, - 2000, - 1000 );\n\n        this.scene.add( lights[ 0 ] );\n        this.scene.add( lights[ 1 ] );\n        this.scene.add( lights[ 2 ] );\n    };\n\n    startAnimationLoop = () => {\n        // slowly rotate an object\n        if (this.model) this.model.rotation.y += 0.01;\n        if (this.model1) this.model1.rotation.x += 0.01;\n        if (this.model2) this.model2.rotation.x += 0.01;\n        if (this.model3) this.model3.rotation.y += 0.01;\n        this.renderer.render( this.scene, this.camera );\n\n        // The window.requestAnimationFrame() method tells the browser that you wish to perform\n        // an animation and requests that the browser call a specified function\n        // to update an animation before the next repaint\n        this.requestID = window.requestAnimationFrame(this.startAnimationLoop);\n    };\n\n    handleWindowResize = () => {\n        const width = this.mount.clientWidth;\n        const height = this.mount.clientHeight;\n\n        this.renderer.setSize( width, height );\n        this.camera.aspect = width / height;\n\n        // Note that after making changes to most of camera properties you have to call\n        // .updateProjectionMatrix for the changes to take effect.\n        this.camera.updateProjectionMatrix();\n    };\n\n    render() {\n        return <div style={style} ref={ref => (this.mount = ref)} />;\n    }\n}\n\nclass Container extends React.Component {\n    state = {isMounted: true};\n\n    render() {\n        const {isMounted = true, loadingPercentage = 0} = this.state;\n        return (\n            <>\n                {/* <button onClick={() => this.setState(state => ({isMounted: !state.isMounted}))}>\n                    {isMounted ? \"Unmount\" : \"Mount\"}\n                </button> */}<br></br><br></br><br></br><br></br><br></br>\n                {isMounted && <App onProgress={loadingPercentage => this.setState({ loadingPercentage })} />}\n                {/* {isMounted && loadingPercentage === 100 && <div>Scroll to zoom, drag to rotate</div>}\n                {isMounted && loadingPercentage !== 100 && <div>Loading Model: {loadingPercentage}%</div>} */}\n            </>\n        )\n    }\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<Container />, rootElement);"],"sourceRoot":""}